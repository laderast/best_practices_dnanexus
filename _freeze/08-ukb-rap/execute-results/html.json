{
  "hash": "bd096b876f58c951dcfb60c88f16c9c5",
  "result": {
    "markdown": "# Work Effectively on the UK Biobank Research Analysis Platform\n\n## Introduction\n\nThe UK Biobank Research Analysis Platform (RAP) gives you the ability to work with one of the largest cohorts of people: over 500,000 participants.\n\nIf you're coming from either analyzing data on your own machine or from HPC computing, there are some key differences that you will have to learn.\n\nThis chapter attempts to give you the knowledge you need to work successfully on the RAP.\n\n## Learning Objectives\n\n1. **Explain** key differences with the Research Analysis Platform (RAP) and the core DNAnexus platform.\n1. **Explain** how to process files using built in apps on RAP using Swiss Army Knife.\n1. **Identify** two key methods for extracting Pheno Data in a RAP project.\n1. **Explain** the two main strategies for listing and accessing files in a RAP project in JupyterLab or RStudio (`dx find data` versus `/mnt/project/`). \n1. **Utilize** JupyterLab on RAP reproducibly with Python/R/bash.\n1. **Utilize** RStudio on RAP reproducibly.\n\n## What's Different?\n\nThere are three main differences with UK Biobank and the Core DNAnexus Platform.\n\n1. You are limited to sharing within your own application ID.\n2. The participant identifiers (`eid`s) are different across applications because of the psuedonymization process.\n3. There is a `Bulk/` File Folder that contains many of the files you want to analyze.\n\n:::{.callout-note}\n## Don't forget about UK Biobank Community!\n\nThe UK Biobank Community (at <https://community.dnanexus.com>) is an incredible resource to ask questions, see answers, learn about webinars/tutorials, and understand. \n\nJust know that you're part of a huge group of researchers who are learning to use RAP and they have probably encountered similar issues to you. \n:::\n\n## Application ID and Sharing\n\nWhat is an application ID? \n\n![UKB Application Process](images/ukb_application.png)\n\n## Psuedonymization and Participant IDs\n\nWithin an application, participant IDs (also known as EIDs) are unique, through the pseudonymization process. This process has been done to ensure security and anonymity of participants. This means that you **cannot join data across applications**. \n\nFor example, if I'm in application ID `43333` and you're in application `11111`, our EIDs will not correspond because we have unique EIDs. Our data files are also mapped to these unique IDs.\n\nSo if I make a pheno matrix with EIDs and you want to reuse this pheno matrix in your application, it won't work, because our EIDs don't match up. \n\n## Bulk Files\n\nThe other difference with UKB RAP is that a lot of the data (image, genomics, etc) are available as files that have been dispensed into your `Bulk/` folder. \n\nHere are a few examples of searching for bulk files using `dx find data`:\n\n### Search on Field ID\n\n\n### Search on EID\n\n\n\n:::{.callout-note}\n## UKB Showcase is Your Friend\n\nWhen you work with the UKB Pheno Data, you will need to find Field IDs for particular fields that you're interested in. Sometimes there are multiple measurements/instances for Field IDs. \n\nTo understand the structure of the data (and what field IDs to grab), I highly recommend using [UKB Showcase](https://biobank.ndph.ox.ac.uk/showcase/) to browse the fields. \n\n:::\n\n\n## Example Jobs on UKB\n\n\n\n## Extracting Pheno Data from the RAP Dataset\n\nThis is a question we get a lot. I'll explain the current two best ways to extract the pheno data:\n\n1. *If you are less command-line savvy*: Use the [Table Exporter App](https://documentation.dnanexus.com/developer/apps/developing-spark-apps/table-exporter-application) to export the phenotype fields to a CSV file. You have the option to select a decoded file when you run it. \n2. *If you have started to use `dx-toolkit`*: Use the `dx-toolkit` command [`dx extract_dataset` from Python](dx_extract_dataset_python.ipynb) or [`dx extract_dataset` from R](dx_extract_dataset_R.ipynb) to extract raw values to a CSV file, and decode the file manually. If your query takes longer than 2 minutes to run, then you will have to start a Spark JupyterLab Cluster and run the SQL query generated by `dx extract_dataset` with the `--sql` option. \n\nThe first thing you need to do is identify the dataset in your project. Make sure that you chose to dispense data in your project (see above), and the dataset should be in the root of your project and begin with `dataset-`. \n\nYou'll want to grab the record ID for your dataset. You can find it by selecting your dataset in the GUI and clicking the \"i\" button in the top-left. \n\n## Using JupyterLab on RAP\n\n\n### Using Stata/JupyterLab on RAP\n\n\n## Using R/RStudio on RAP\n\nOne of the nice features of RAP is that you can run R/RStudio on it.\n\n:::{.callout-note}\n## How running RStudio on RAP is different\n\nThe first thing you'll notice is that the Files tab in RStudio is isolated from the project storage. \n\nTo access data in your RStudio project, you will have to use `dx download` or `dxFUSE` to load the data. \n\nHere's a quick table that talks about the main differences with using RStudio on RAP compared to a local installation of RStudio. \n\n| Feature | Local RStudio   | RStudio on RAP                        |\n|-------|---------------|-------------------------------------------|\n|Accessing Files |Has Access to your local filesystem | Access files in RAP project using `dxfuse` (`/mnt/project/myfile.txt/`) or using `dx download`|\n|Installing Packages|Use `install.packages()`|Init `renv` in project, then install packages|\n|Saving Projects|Save files in project|Use snapshot `dx backup-folder` capability to save project folder to RAP Storage|\n|Opening Projects|Open `.rproj` file in Project|Use `dx restore-folder` to restore project folder, then open `.rproj` file|\n\n:::\n\n:::{.callout-warning}\n## Make sure you terminate!\n\nJust because you have closed your RStudio Session does not mean that the job is terminated. Use the red terminate button on the top of the RStudio interface to stop the cloud worker.\n:::\n\n### Looking at files in your RAP Project\n\nLet's take a quick look at the files in our `/Bulk/` folder. In the RStudio console, we can use `list.files()` to do this.\n\nNote we put a `/mnt/project/` in front of `/Bulk/`. This is how we access the file system contents using `dxFUSE`.\n\n```\n list.files(\"/mnt/project/Bulk/\")\n```\n\nThe response from the console is this:\n\n```\n[1] \"Activity\"                                     \"Brain MRI\"               \n[3] \"Carotid Ultrasound\"                           \"Electrocardiogram\"        \n[5] \"Exome sequences\"                              \"Exome sequences_Alternative exome processing\"\n[7] \"Exome sequences_Previous exome releases\"      \"Genotype Results\"         \n[9] \"Heart MRI\"                                    \"Imputation\"              \n[11] \"Kidney MRI\"                                   \"Liver MRI\"               \n[13] \"Pancreas MRI\"                                 \"Protein biomarkers\"      \n[15] \"Retinal Optical Coherence Tomography\"         \"Whole Body DXA\"          \n[17] \"Whole Body MRI\"                               \"Whole genome sequences\"   \n```\n\nSay we want to dive deeper into `Exome sequences`. We can run:\n\n```\nlist.files(\"/mnt/project/Bulk/Exome sequences\")\n```\n\nAnd we'll see the different formats of the Exome data:\n\n```\n[1] \"Exome OQFE CRAM files\"                                                   \n[2] \"Exome OQFE variant call files (VCFs)\"                                    \n[3] \"Population level exome OQFE variants, BGEN format - final release\"       \n[4] \"Population level exome OQFE variants, BGEN format - interim 450k release\"\n[5] \"Population level exome OQFE variants, PLINK format - final release\"    \n[6] \"Population level exome OQFE variants, PLINK format - interim 450k release\"\n[7] \"Population level exome OQFE variants, pVCF format - final release\"       \n[8] \"Population level exome OQFE variants, pVCF format - interim 450k release\" \n```\n\nWithin each of these folders is a series of numbered folders that have two digits. The two digits (such as `11`) are the first two digits of the EIDs that are in the folder. For example, a file with an EID of `2281131` is going to be in `22/` folder.\n\nThere are some hard limits to the number of files that can be in a folder. Thus, each set of 500K files (such as `1331113.vcf.gz`) is split up into multiple folders with about 10000 files in each. \n\n\n### Reproducible Research using RStudio on RAP\n\nMy key piece of advice when running RStudio on RAP is to use the following process. \n\n1. Initialize a new RStudio project.\n1. Use `renv` to install packages to your RStudio Project with `install.packages()`\n1. Load data either using `dx download` (for smaller batches of files) or dxFUSE (using paths like `/mnt/project/myfile.txt`).\n1. Do your work, saving it in an `Rmarkdown` or `quarto` document.\n1. Run `renv::snapshot()` in your RStudio project.\n1. Use the `dx-toolkit` snapshot functionality in `dx-toolkit` to save (`dx backup-folder-/`) your project into RAP Storage. (`dx-backup-folder -d /.Backups/my_project.tar.gz`)\n1. To resume your work, restore (`dx restore-folder`) your project from RAP Storage.\n1. To install more packages, use `renv::activate()`, `install.packages()`, and then `renv::snapshot()`. \n\n:::{.callout-note}\n## What is `renv`?\n\n`renv` is a R Package that implements virtual environments for your RStudio project. \n\nIn short, a virtual environment allows you to completely reproduce the **software environment** (all the packages with their version numbers) in your project. \n\nEach project has its own library of packages. This is also handy in that you can work with multiple projects that each have their own version of a package.\n\n:::\n\n\nThis seems to be a lot of extra work. Why do it? Well, this process alleviates a lot of complaints about working with a cloud instance of RStudio:\n\n1. It allows you to resume work on a RStudio project without having to reinstall packages or redownload data. Everything is saved\n1. It ties your packages to version numbers. Sharing an RStudio Project with `renv`initialized means that your collaborators can install an identical software environment and reproduce your work.\n\n",
    "supporting": [
      "08-ukb-rap_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}